// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const checkPostForUser = `-- name: CheckPostForUser :one
select exists (select 1 from posts where id = $1 and user_id = $2 for update)
`

type CheckPostForUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CheckPostForUser(ctx context.Context, arg CheckPostForUserParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkPostForUser, arg.ID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deletePostByID = `-- name: DeletePostByID :exec
delete from posts where id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostByID, id)
	return err
}

const deleteTagForPost = `-- name: DeleteTagForPost :exec
delete from post_tags
where post_id = $1 and tag_id = (select id from tags where name = $2)
`

type DeleteTagForPostParams struct {
	PostID uuid.UUID
	Name   string
}

func (q *Queries) DeleteTagForPost(ctx context.Context, arg DeleteTagForPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteTagForPost, arg.PostID, arg.Name)
	return err
}

const getPostByID = `-- name: GetPostByID :one
select id, user_id, title, content, answered, created_at from posts where id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Answered,
		&i.CreatedAt,
	)
	return i, err
}

const getPostTags = `-- name: GetPostTags :many
select t.name
from tags t
join post_tags pt on pt.tag_id = t.id
where pt.post_id = $1
`

func (q *Queries) GetPostTags(ctx context.Context, postID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPostTags, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPost = `-- name: InsertPost :one
insert into posts (id, user_id, title, content)
values ($1, $2, $3, $4)
returning id, user_id, title, content, answered, created_at
`

type InsertPostParams struct {
	ID      uuid.UUID
	UserID  uuid.UUID
	Title   string
	Content string
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, insertPost,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Answered,
		&i.CreatedAt,
	)
	return i, err
}

const insertTag = `-- name: InsertTag :one
insert into tags (name) 
values ($1)
on conflict (name) do update 
    set name = excluded.name 
returning id
`

func (q *Queries) InsertTag(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertTag, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertTagForPost = `-- name: InsertTagForPost :exec
insert into post_tags (post_id, tag_id)
values ($1, $2)
`

type InsertTagForPostParams struct {
	PostID uuid.UUID
	TagID  int32
}

func (q *Queries) InsertTagForPost(ctx context.Context, arg InsertTagForPostParams) error {
	_, err := q.db.ExecContext(ctx, insertTagForPost, arg.PostID, arg.TagID)
	return err
}

const togglePostAnswered = `-- name: TogglePostAnswered :one
update posts
set answered = not answered
where id = $1
returning id, user_id, title, content, answered, created_at
`

func (q *Queries) TogglePostAnswered(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, togglePostAnswered, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Answered,
		&i.CreatedAt,
	)
	return i, err
}

const updatePostByID = `-- name: UpdatePostByID :one
update posts
set
    title = $1,
    content = $2
where id = $3
returning id, user_id, title, content, answered, created_at
`

type UpdatePostByIDParams struct {
	Title   string
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdatePostByID(ctx context.Context, arg UpdatePostByIDParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostByID, arg.Title, arg.Content, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Answered,
		&i.CreatedAt,
	)
	return i, err
}
