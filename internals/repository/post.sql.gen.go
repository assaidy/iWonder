// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package repository

import (
	"context"
	"strings"
	"time"

	"github.com/google/uuid"
)

const checkComment = `-- name: CheckComment :one
select exists (select 1 from comments where id = $1 for update)
`

func (q *Queries) CheckComment(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkComment, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkCommentForUser = `-- name: CheckCommentForUser :one
select exists (select 1 from comments where id = $1 and user_id = $2 for update)
`

type CheckCommentForUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CheckCommentForUser(ctx context.Context, arg CheckCommentForUserParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkCommentForUser, arg.ID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkCommentVoteForUser = `-- name: CheckCommentVoteForUser :one
select exists (select 1 from comment_votes where comment_id = $1 and user_id = $2 for update)
`

type CheckCommentVoteForUserParams struct {
	CommentID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) CheckCommentVoteForUser(ctx context.Context, arg CheckCommentVoteForUserParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkCommentVoteForUser, arg.CommentID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPost = `-- name: CheckPost :one
select exists (select 1 from posts where id = $1 for update)
`

func (q *Queries) CheckPost(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkPost, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPostForUser = `-- name: CheckPostForUser :one
select exists (select 1 from posts where id = $1 and user_id = $2 for update)
`

type CheckPostForUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CheckPostForUser(ctx context.Context, arg CheckPostForUserParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkPostForUser, arg.ID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteComment = `-- name: DeleteComment :exec
delete from comments where id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deleteCommentVote = `-- name: DeleteCommentVote :exec
delete from comment_votes where comment_id = $1 and user_id = $2
`

type DeleteCommentVoteParams struct {
	CommentID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) DeleteCommentVote(ctx context.Context, arg DeleteCommentVoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteCommentVote, arg.CommentID, arg.UserID)
	return err
}

const deletePostAnswer = `-- name: DeletePostAnswer :exec
delete from post_answers where post_id = $1
`

func (q *Queries) DeletePostAnswer(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostAnswer, postID)
	return err
}

const deletePostByID = `-- name: DeletePostByID :exec
delete from posts where id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostByID, id)
	return err
}

const deleteTagForPost = `-- name: DeleteTagForPost :exec
delete from post_tags
where post_id = $1 and tag_id = (select id from tags where name = $2)
`

type DeleteTagForPostParams struct {
	PostID uuid.UUID
	Name   string
}

func (q *Queries) DeleteTagForPost(ctx context.Context, arg DeleteTagForPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteTagForPost, arg.PostID, arg.Name)
	return err
}

const getCommentVoteCounts = `-- name: GetCommentVoteCounts :one
select 
    sum(case when kind = 'up' then 1 else 0 end) over () as up_count,
    sum(case when kind = 'down' then 1 else 0 end) over () as down_count
from comment_votes
where comment_id = $1
`

type GetCommentVoteCountsRow struct {
	UpCount   int64
	DownCount int64
}

func (q *Queries) GetCommentVoteCounts(ctx context.Context, commentID uuid.UUID) (GetCommentVoteCountsRow, error) {
	row := q.db.QueryRowContext(ctx, getCommentVoteCounts, commentID)
	var i GetCommentVoteCountsRow
	err := row.Scan(&i.UpCount, &i.DownCount)
	return i, err
}

const getPostAnswer = `-- name: GetPostAnswer :one
select c.id, c.post_id, c.user_id, c.content, c.created_at
from post_answers pa
join comments c on c.id = pa.comment_id
where pa.post_id = $1
`

func (q *Queries) GetPostAnswer(ctx context.Context, postID uuid.UUID) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getPostAnswer, postID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getPostByID = `-- name: GetPostByID :one
select id, user_id, title, content, answered, created_at from posts where id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Answered,
		&i.CreatedAt,
	)
	return i, err
}

const getPostComments = `-- name: GetPostComments :many
select id, post_id, user_id, content, created_at from comments
where 
    post_id = $1 and
    created_at <= coalesce(
        nullif($3::timestamptz, '0001-01-01 00:00:00'::timestamptz),
        now()::timestamptz
    )
order by created_at desc
limit $2
`

type GetPostCommentsParams struct {
	PostID    uuid.UUID
	Limit     int32
	CreatedAt time.Time
}

func (q *Queries) GetPostComments(ctx context.Context, arg GetPostCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getPostComments, arg.PostID, arg.Limit, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostTags = `-- name: GetPostTags :many
select t.name
from tags t
join post_tags pt on pt.tag_id = t.id
where pt.post_id = $1
`

func (q *Queries) GetPostTags(ctx context.Context, postID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPostTags, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPosts = `-- name: GetPosts :many
select p.id, p.user_id, p.title, p.content, p.answered, p.created_at
from posts p
join post_tags pt on pt.post_id = p.id
join tags t on t.id = pt.tag_id
where
    p.created_at <= coalesce(
        nullif($2::timestamptz, '0001-01-01 00:00:00'::timestamptz),
        now()::timestamptz
    ) and
    coalesce(t.name in ($3), true) and
    to_tsvector('english', p.title || ' ' || p.content) @@ to_tsquery($4)
order by p.created_at desc
limit $1
`

type GetPostsParams struct {
	Limit     int32
	CreatedAt time.Time
	Tags      []string
	Query     string
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	query := getPosts
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Limit)
	queryParams = append(queryParams, arg.CreatedAt)
	if len(arg.Tags) > 0 {
		for _, v := range arg.Tags {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:tags*/?", strings.Repeat(",?", len(arg.Tags))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:tags*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Query)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Answered,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPosts = `-- name: GetUserPosts :many
select id, user_id, title, content, answered, created_at
from posts
where
    user_id = $1 and
    created_at <= coalesce(
        nullif($3::timestamptz, '0001-01-01 00:00:00'::timestamptz),
        now()::timestamptz
    )
order by created_at desc
limit $2
`

type GetUserPostsParams struct {
	UserID    uuid.UUID
	Limit     int32
	CreatedAt time.Time
}

func (q *Queries) GetUserPosts(ctx context.Context, arg GetUserPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, arg.UserID, arg.Limit, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Answered,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertComment = `-- name: InsertComment :exec
insert into comments (id, post_id, user_id, content)
values ($1, $2, $3, $4)
`

type InsertCommentParams struct {
	ID      uuid.UUID
	PostID  uuid.UUID
	UserID  uuid.UUID
	Content string
}

func (q *Queries) InsertComment(ctx context.Context, arg InsertCommentParams) error {
	_, err := q.db.ExecContext(ctx, insertComment,
		arg.ID,
		arg.PostID,
		arg.UserID,
		arg.Content,
	)
	return err
}

const insertCommentVote = `-- name: InsertCommentVote :exec
insert into comment_votes (comment_id, user_id, kind)
values ($1, $2, $3)
on conflict (comment_id, user_id) do update
    set kind = excluded.kind
`

type InsertCommentVoteParams struct {
	CommentID uuid.UUID
	UserID    uuid.UUID
	Kind      string
}

func (q *Queries) InsertCommentVote(ctx context.Context, arg InsertCommentVoteParams) error {
	_, err := q.db.ExecContext(ctx, insertCommentVote, arg.CommentID, arg.UserID, arg.Kind)
	return err
}

const insertPost = `-- name: InsertPost :one
insert into posts (id, user_id, title, content)
values ($1, $2, $3, $4)
returning id, user_id, title, content, answered, created_at
`

type InsertPostParams struct {
	ID      uuid.UUID
	UserID  uuid.UUID
	Title   string
	Content string
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, insertPost,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Answered,
		&i.CreatedAt,
	)
	return i, err
}

const insertPostAnswer = `-- name: InsertPostAnswer :exec
insert into post_answers (post_id, comment_id)
values ($1, $2)
on conflict (post_id) do update
    set comment_id = excluded.comment_id
`

type InsertPostAnswerParams struct {
	PostID    uuid.UUID
	CommentID uuid.UUID
}

func (q *Queries) InsertPostAnswer(ctx context.Context, arg InsertPostAnswerParams) error {
	_, err := q.db.ExecContext(ctx, insertPostAnswer, arg.PostID, arg.CommentID)
	return err
}

const insertTag = `-- name: InsertTag :one
insert into tags (name) 
values ($1)
on conflict (name) do update 
    set name = excluded.name 
returning id
`

func (q *Queries) InsertTag(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertTag, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertTagForPost = `-- name: InsertTagForPost :exec
insert into post_tags (post_id, tag_id)
values ($1, $2)
`

type InsertTagForPostParams struct {
	PostID uuid.UUID
	TagID  int32
}

func (q *Queries) InsertTagForPost(ctx context.Context, arg InsertTagForPostParams) error {
	_, err := q.db.ExecContext(ctx, insertTagForPost, arg.PostID, arg.TagID)
	return err
}

const updateComment = `-- name: UpdateComment :exec
update comments
set content = $1
where id = $2
`

type UpdateCommentParams struct {
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, updateComment, arg.Content, arg.ID)
	return err
}

const updatePostByID = `-- name: UpdatePostByID :exec
update posts
set
    title = $1,
    content = $2
where id = $3
`

type UpdatePostByIDParams struct {
	Title   string
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdatePostByID(ctx context.Context, arg UpdatePostByIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePostByID, arg.Title, arg.Content, arg.ID)
	return err
}
