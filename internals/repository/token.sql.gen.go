// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getRefreshToken = `-- name: GetRefreshToken :one
select token, user_id, created_at, expires_at from refresh_tokens where token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
insert into refresh_tokens (token, user_id, expires_at)
values ($1, $2, $3)
`

type InsertRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}
