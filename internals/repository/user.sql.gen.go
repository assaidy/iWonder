// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkUserID = `-- name: CheckUserID :one
select exists(select 1 from users where id = $1 for update)
`

func (q *Queries) CheckUserID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUsername = `-- name: CheckUsername :one
select exists(select 1 from users where username = $1 for update)
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteUserById = `-- name: DeleteUserById :exec
delete from users where id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, name, bio, username, hashed_password, created_at from users where username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :execrows
insert into users (id, name, bio, username, hashed_password)
values ($1, $2, $3, $4, $5)
on conflict (username) do nothing
`

type InsertUserParams struct {
	ID             uuid.UUID
	Name           string
	Bio            sql.NullString
	Username       string
	HashedPassword string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Bio,
		arg.Username,
		arg.HashedPassword,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUserByID = `-- name: UpdateUserByID :exec
update users
set
    name = $1,
    bio = $2,
    username = $3,
    hashed_password = $4
where id = $5
`

type UpdateUserByIDParams struct {
	Name           string
	Bio            sql.NullString
	Username       string
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByID,
		arg.Name,
		arg.Bio,
		arg.Username,
		arg.HashedPassword,
		arg.ID,
	)
	return err
}
